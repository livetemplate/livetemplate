package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"github.com/livefir/livetemplate"
)

type AppState struct {
	Title       string `json:"title"`
	Counter     int    `json:"counter"`
	LastUpdated string `json:"last_updated"`
}

func (s *AppState) Change(ctx *livetemplate.ActionContext) error {
	switch ctx.Action {
	case "increment":
		s.Counter++
	case "decrement":
		s.Counter--
	case "reset":
		s.Counter = 0
	default:
		log.Printf("Unknown action: %s", ctx.Action)
		return nil
	}

	s.LastUpdated = formatTime()
	return nil
}

func formatTime() string {
	return time.Now().Format("2006-01-02 15:04:05")
}

func main() {
	log.Println("[[.AppName]] starting...")

	// Create initial state
	state := &AppState{
		Title:       "[[.AppName]]",
		Counter:     0,
		LastUpdated: formatTime(),
	}

	// Create template - auto-discovers [[.AppName]].tmpl
	tmpl := livetemplate.New("[[.AppName]]", livetemplate.WithDevMode([[.DevMode]]))

	// Mount handler
	http.Handle("/", tmpl.Handle(state))

	// Serve client library
	http.HandleFunc("/livetemplate-client.js", serveClientLibrary)

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	log.Printf("Server starting on http://localhost:%s", port)

	err := http.ListenAndServe(":"+port, nil)
	if err != nil {
		log.Fatalf("Server failed to start: %v", err)
	}
}

func serveClientLibrary(w http.ResponseWriter, r *http.Request) {
	paths := []string{
		"livetemplate-client.js",
		"../client/dist/livetemplate-client.browser.js",
		"../../client/dist/livetemplate-client.browser.js",
	}

	for _, path := range paths {
		content, err := os.ReadFile(path)
		if err == nil {
			w.Header().Set("Content-Type", "application/javascript")
			w.Write(content)
			return
		}
	}

	http.Error(w, "Client library not found. For production, use CDN: https://cdn.jsdelivr.net/npm/@livefir/livetemplate-client/dist/livetemplate-client.browser.js", http.StatusNotFound)
}
