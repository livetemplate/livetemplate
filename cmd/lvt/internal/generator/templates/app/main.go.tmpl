package main

import (
	"log"
	"net/http"
	"os"

	"[[.ModuleName]]/internal/app/home"
	"[[.ModuleName]]/internal/database"
)

func main() {
	log.Println("[[.AppName]] starting...")

	// Initialize database
	dbPath := getDBPath()
	queries, err := database.InitDB(dbPath)
	if err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}
	defer database.CloseDB()

	// Home page
	http.Handle("/", home.Handler())

	// Serve LiveTemplate client library
	// For development: loads from node_modules or local copy
	// For production: serve from CDN or embed in binary
	http.HandleFunc("/livetemplate-client.js", serveClientLibrary)

	// TODO: Add routes here
	// Example: http.Handle("/users", users.Handler(queries))

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	log.Printf("Server starting on http://localhost:%s", port)

	err = http.ListenAndServe(":"+port, nil)
	if err != nil {
		log.Fatalf("Server failed to start: %v", err)
	}
}

func getDBPath() string {
	if os.Getenv("TEST_MODE") == "1" {
		return ":memory:"
	}
	return "app.db"
}

func serveClientLibrary(w http.ResponseWriter, r *http.Request) {
	// Try multiple paths for the client library (development/testing)
	paths := []string{
		"livetemplate-client.js",                                  // Local copy (for testing)
		"../../client/dist/livetemplate-client.browser.js",        // When running from cmd/app
		"../../../client/dist/livetemplate-client.browser.js",     // When running from deeper
		"../../../../client/dist/livetemplate-client.browser.js",  // When running even deeper
	}

	for _, path := range paths {
		content, err := os.ReadFile(path)
		if err == nil {
			w.Header().Set("Content-Type", "application/javascript")
			w.Write(content)
			return
		}
	}

	// If not found locally, return error with CDN suggestion
	http.Error(w, "Client library not found. For production, use CDN: https://cdn.jsdelivr.net/npm/@livefir/livetemplate-client/dist/livetemplate-client.browser.js", http.StatusNotFound)
}
