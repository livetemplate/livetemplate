{
  "version": 3,
  "sources": ["../client/livetemplate-client.js", "../node_modules/morphdom/dist/morphdom-esm.js"],
  "sourcesContent": ["/**\n * LiveTemplate Client Library\n * \n * A unified WebSocket-based client for LiveTemplate tree-based diff updates.\n * Works exclusively with the diff.Update format from the Go backend.\n */\n\nimport morphdom from 'morphdom';\n\nclass LiveTemplateClient {\n  constructor(options = {}) {\n    this.wsUrl = options.wsUrl || this.buildWebSocketUrl();\n    this.pageToken = null;\n    this.ws = null;\n    this.staticCache = new Map(); // Cache static segments by fragment ID\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = options.maxReconnectAttempts || 5;\n    this.reconnectDelay = options.reconnectDelay || 1000;\n    \n    // Callbacks\n    this.onOpen = options.onOpen || (() => console.log(\"\uD83D\uDD0C LiveTemplate connected\"));\n    this.onClose = options.onClose || (() => console.log(\"\uD83D\uDD0C LiveTemplate disconnected\"));\n    this.onError = options.onError || ((error) => console.error(\"\u274C LiveTemplate error:\", error));\n    this.onFragmentUpdate = options.onFragmentUpdate || null;\n  }\n\n  buildWebSocketUrl() {\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    return `${protocol}//${host}/ws`;\n  }\n\n  connect(token) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      console.log(\"Already connected\");\n      return;\n    }\n\n    this.pageToken = token;\n    const url = `${this.wsUrl}?token=${token}`;\n    \n    console.log(\"\uD83D\uDD0C Connecting to LiveTemplate:\", url);\n    this.ws = new WebSocket(url);\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.ws.onopen = () => {\n      console.log(\"\u2705 LiveTemplate WebSocket connection established\");\n      this.reconnectAttempts = 0;\n      this.onOpen();\n    };\n\n    this.ws.onclose = (event) => {\n      console.log(`\uD83D\uDD0C LiveTemplate WebSocket closed (code: ${event.code})`);\n      this.onClose(event);\n      \n      if (event.code !== 1000) { // Not a normal closure\n        this.attemptReconnect();\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      console.error(\"\u274C LiveTemplate WebSocket error:\", error);\n      this.onError(error);\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const fragments = JSON.parse(event.data);\n        console.log(\"\uD83D\uDCE6 Received fragments:\", fragments);\n        this.applyFragments(fragments);\n      } catch (error) {\n        console.error(\"\u274C Error parsing fragment data:\", error, event.data);\n      }\n    };\n  }\n\n  applyFragments(fragments) {\n    // Handle both array format and object format\n    const fragmentArray = Array.isArray(fragments) ? fragments : \n      Object.entries(fragments).map(([id, data]) => ({ id, data }));\n\n    fragmentArray.forEach(fragment => {\n      try {\n        this.applyDiffUpdate(fragment);\n      } catch (error) {\n        console.error(`\u274C Error applying fragment ${fragment.id}:`, error);\n      }\n    });\n  }\n\n  applyDiffUpdate(fragment) {\n    const element = document.querySelector(`[lvt-id=\"${fragment.id}\"]`);\n    if (!element) {\n      console.warn(`\u26A0\uFE0F Element with lvt-id=\"${fragment.id}\" not found`);\n      return;\n    }\n\n    if (!fragment.data || typeof fragment.data !== 'object') {\n      console.warn(`\u26A0\uFE0F Invalid diff.Update data for fragment ${fragment.id}`);\n      return;\n    }\n\n    const update = fragment.data;\n    \n    // Handle statics (s) - cache them for future updates\n    if (update.s && Array.isArray(update.s)) {\n      this.staticCache.set(fragment.id, update.s);\n      console.log(`\uD83D\uDCBE Cached ${update.s.length} static segments for fragment ${fragment.id}`);\n    }\n\n    // Get cached statics for this fragment\n    const statics = this.staticCache.get(fragment.id) || [];\n    \n    // Reconstruct content from statics and dynamics\n    const content = this.reconstructFromDiffUpdate(statics, update);\n    \n    if (content === null) {\n      console.log(`\u23F8\uFE0F Fragment ${fragment.id}: No content to update`);\n      return;\n    }\n\n    // Apply the update using morphdom\n    this.applyContentUpdate(element, content, fragment.id);\n\n    // Call user callback if provided\n    if (this.onFragmentUpdate) {\n      this.onFragmentUpdate(fragment, element);\n    }\n  }\n\n  reconstructFromDiffUpdate(statics, update) {\n    // If no statics cached and none provided, can't reconstruct\n    if (!statics.length && (!update.s || !update.s.length)) {\n      console.warn(\"\u26A0\uFE0F No static segments available for reconstruction\");\n      return null;\n    }\n\n    // Use provided statics or cached ones\n    const staticSegments = update.s || statics;\n    \n    // If no dynamics, just join statics\n    const hasDynamics = Object.keys(update).some(key => \n      key !== 's' && key !== 'h' && key !== 'S' && key !== 'H'\n    );\n\n    if (!hasDynamics) {\n      return staticSegments.join('');\n    }\n\n    // Interleave statics and dynamics\n    let result = '';\n    for (let i = 0; i < staticSegments.length; i++) {\n      result += staticSegments[i];\n      \n      // Add dynamic value if it exists (dynamics are keyed by position)\n      if (i < staticSegments.length - 1) {\n        const dynamicValue = update[i.toString()];\n        if (dynamicValue !== undefined) {\n          result += dynamicValue;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  applyContentUpdate(element, newContent, fragmentId) {\n    // Create a temporary element with the new content\n    const tempElement = element.cloneNode(false);\n    tempElement.innerHTML = newContent;\n\n    console.log(`\uD83D\uDD04 Updating fragment ${fragmentId}:`, {\n      element: element.tagName + (element.className ? '.' + element.className : ''),\n      oldContent: element.innerHTML.substring(0, 50) + (element.innerHTML.length > 50 ? '...' : ''),\n      newContent: newContent.substring(0, 50) + (newContent.length > 50 ? '...' : '')\n    });\n\n    // Use morphdom to efficiently update only what changed\n    morphdom(element, tempElement, {\n      onBeforeElUpdated: (fromEl, toEl) => {\n        // Preserve focus if the element is focused\n        if (fromEl === document.activeElement) {\n          return true;\n        }\n        return true;\n      },\n      childrenOnly: true // Only update children, preserve the element itself\n    });\n\n    console.log(`\u2705 Fragment ${fragmentId}: Applied diff update`);\n  }\n\n  sendAction(action, data = {}) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.warn(\"\u26A0\uFE0F WebSocket not connected, cannot send action\");\n      return;\n    }\n\n    const message = {\n      action: action,\n      ...data\n    };\n\n    console.log(\"\uD83D\uDCE4 Sending action:\", message);\n    this.ws.send(JSON.stringify(message));\n  }\n\n  attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error(`\u274C Max reconnection attempts (${this.maxReconnectAttempts}) reached`);\n      return;\n    }\n\n    this.reconnectAttempts++;\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1); // Exponential backoff\n    \n    console.log(`\uD83D\uDD04 Reconnection attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts} in ${delay}ms`);\n    \n    setTimeout(() => {\n      if (this.pageToken) {\n        this.connect(this.pageToken);\n      }\n    }, delay);\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close(1000, \"Client requested disconnect\");\n      this.ws = null;\n    }\n    this.staticCache.clear();\n  }\n}\n\n// Export for both ES modules and browser globals\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = LiveTemplateClient;\n} else if (typeof window !== 'undefined') {\n  window.LiveTemplateClient = LiveTemplateClient;\n}\n\nexport default LiveTemplateClient;", "var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                    // handle empty optgroups\n                    if (!curChild) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n    return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n  return function morphdom(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof toNode === 'string') {\n      if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement('html');\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n      toNode = toNode.firstElementChild;\n    }\n\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var skipFromChildren = options.skipFromChildren || noop;\n    var addChild = options.addChild || function(parent, child){ return parent.appendChild(child); };\n    var childrenOnly = options.childrenOnly === true;\n\n    // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n    var fromNodesLookup = Object.create(null);\n    var keyedRemovalList = [];\n\n    function addKeyedRemoval(key) {\n      keyedRemovalList.push(key);\n    }\n\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n        while (curChild) {\n\n          var key = undefined;\n\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            // If we are skipping keyed nodes then we add the key\n            // to a list so that it can be handled at the very end.\n            addKeyedRemoval(key);\n          } else {\n            // Only report the node as discarded if it is not keyed. We do this because\n            // at the end we loop through all keyed elements that were unmatched\n            // and then discard them in one final pass.\n            onNodeDiscarded(curChild);\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    /**\n    * Removes a DOM node out of the original DOM\n    *\n    * @param  {Node} node The node to remove\n    * @param  {Node} parentNode The nodes parent\n    * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n    * @return {undefined}\n    */\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    }\n\n    // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n    // function indexTree(root) {\n    //     var treeWalker = document.createTreeWalker(\n    //         root,\n    //         NodeFilter.SHOW_ELEMENT);\n    //\n    //     var el;\n    //     while((el = treeWalker.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n    //\n    // function indexTree(node) {\n    //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n    //     var el;\n    //     while((el = nodeIterator.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n        var curChild = node.firstChild;\n        while (curChild) {\n          var key = getNodeKey(curChild);\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          }\n\n          // Walk recursively\n          indexTree(curChild);\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    indexTree(fromNode);\n\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n\n      var curChild = el.firstChild;\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n\n        var key = getNodeKey(curChild);\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n          // if we find a duplicate #id node in cache, replace `el` with cache value\n          // and morph it to the child node.\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          } else {\n            handleNodeAdded(curChild);\n          }\n        } else {\n          // recursively call for curChild and it's children to see if we find something in\n          // fromNodesLookup\n          handleNodeAdded(curChild);\n        }\n\n        curChild = nextSibling;\n      }\n    }\n\n    function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n      // We have processed all of the \"to nodes\". If curFromNodeChild is\n      // non-null then we still have some from nodes left over that need\n      // to be removed\n      while (curFromNodeChild) {\n        var fromNextSibling = curFromNodeChild.nextSibling;\n        if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n          // Since the node is keyed it might be matched up later so we defer\n          // the actual removal to later\n          addKeyedRemoval(curFromNodeKey);\n        } else {\n          // NOTE: we skip nested keyed nodes from being removed since there is\n          //       still a chance they will be matched up later\n          removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n        }\n        curFromNodeChild = fromNextSibling;\n      }\n    }\n\n    function morphEl(fromEl, toEl, childrenOnly) {\n      var toElKey = getNodeKey(toEl);\n\n      if (toElKey) {\n        // If an element with an ID is being morphed then it will be in the final\n        // DOM so clear it out of the saved elements collection\n        delete fromNodesLookup[toElKey];\n      }\n\n      if (!childrenOnly) {\n        // optional\n        var beforeUpdateResult = onBeforeElUpdated(fromEl, toEl);\n        if (beforeUpdateResult === false) {\n          return;\n        } else if (beforeUpdateResult instanceof HTMLElement) {\n          fromEl = beforeUpdateResult;\n          // reindex the new fromEl in case it's not in the same\n          // tree as the original fromEl\n          // (Phoenix LiveView sometimes returns a cloned tree,\n          //  but keyed lookups would still point to the original tree)\n          indexTree(fromEl);\n        }\n\n        // update attributes on original DOM element first\n        morphAttrs(fromEl, toEl);\n        // optional\n        onElUpdated(fromEl);\n\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n\n      if (fromEl.nodeName !== 'TEXTAREA') {\n        morphChildren(fromEl, toEl);\n      } else {\n        specialElHandlers.TEXTAREA(fromEl, toEl);\n      }\n    }\n\n    function morphChildren(fromEl, toEl) {\n      var skipFrom = skipFromChildren(fromEl, toEl);\n      var curToNodeChild = toEl.firstChild;\n      var curFromNodeChild = fromEl.firstChild;\n      var curToNodeKey;\n      var curFromNodeKey;\n\n      var fromNextSibling;\n      var toNextSibling;\n      var matchingFromEl;\n\n      // walk the children\n      outer: while (curToNodeChild) {\n        toNextSibling = curToNodeChild.nextSibling;\n        curToNodeKey = getNodeKey(curToNodeChild);\n\n        // walk the fromNode children all the way through\n        while (!skipFrom && curFromNodeChild) {\n          fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          curFromNodeKey = getNodeKey(curFromNodeChild);\n\n          var curFromNodeType = curFromNodeChild.nodeType;\n\n          // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n          var isCompatible = undefined;\n\n          if (curFromNodeType === curToNodeChild.nodeType) {\n            if (curFromNodeType === ELEMENT_NODE) {\n              // Both nodes being compared are Element nodes\n\n              if (curToNodeKey) {\n                // The target node has a key so we want to match it up with the correct element\n                // in the original DOM tree\n                if (curToNodeKey !== curFromNodeKey) {\n                  // The current element in the original DOM tree does not have a matching key so\n                  // let's check our lookup to see if there is a matching element in the original\n                  // DOM tree\n                  if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                    if (fromNextSibling === matchingFromEl) {\n                      // Special case for single element removals. To avoid removing the original\n                      // DOM node out of the tree (since that can break CSS transitions, etc.),\n                      // we will instead discard the current node and wait until the next\n                      // iteration to properly match up the keyed target element with its matching\n                      // element in the original tree\n                      isCompatible = false;\n                    } else {\n                      // We found a matching keyed element somewhere in the original DOM tree.\n                      // Let's move the original DOM node into the current position and morph\n                      // it.\n\n                      // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                      // the `removeNode()` function for the node that is being discarded so that\n                      // all lifecycle hooks are correctly invoked\n                      fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                      // fromNextSibling = curFromNodeChild.nextSibling;\n\n                      if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                      } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                      }\n\n                      curFromNodeChild = matchingFromEl;\n                      curFromNodeKey = getNodeKey(curFromNodeChild);\n                    }\n                  } else {\n                    // The nodes are not compatible since the \"to\" node has a key and there\n                    // is no matching keyed node in the source tree\n                    isCompatible = false;\n                  }\n                }\n              } else if (curFromNodeKey) {\n                // The original has a key\n                isCompatible = false;\n              }\n\n              isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n              if (isCompatible) {\n                // We found compatible DOM elements so transform\n                // the current \"from\" node to match the current\n                // target DOM node.\n                // MORPH\n                morphEl(curFromNodeChild, curToNodeChild);\n              }\n\n            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n              // Both nodes being compared are Text or Comment nodes\n              isCompatible = true;\n              // Simply update nodeValue on the original node to\n              // change the text value\n              if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n              }\n\n            }\n          }\n\n          if (isCompatible) {\n            // Advance both the \"to\" child and the \"from\" child since we found a match\n            // Nothing else to do as we already recursively called morphChildren above\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          // No compatible match so remove the old node from the DOM and continue trying to find a\n          // match in the original DOM. However, we only do this if the from node is not keyed\n          // since it is possible that a keyed node might match up with a node somewhere else in the\n          // target tree and we don't want to discard it just yet since it still might find a\n          // home in the final DOM tree. After everything is done we will remove any keyed nodes\n          // that didn't find a home\n          if (curFromNodeKey) {\n            // Since the node is keyed it might be matched up later so we defer\n            // the actual removal to later\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            // NOTE: we skip nested keyed nodes from being removed since there is\n            //       still a chance they will be matched up later\n            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n          }\n\n          curFromNodeChild = fromNextSibling;\n        } // END: while(curFromNodeChild) {}\n\n        // If we got this far then we did not find a candidate match for\n        // our \"to node\" and we exhausted all of the children \"from\"\n        // nodes. Therefore, we will just append the current \"to\" node\n        // to the end\n        if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n          // MORPH\n          if(!skipFrom){ addChild(fromEl, matchingFromEl); }\n          morphEl(matchingFromEl, curToNodeChild);\n        } else {\n          var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n          if (onBeforeNodeAddedResult !== false) {\n            if (onBeforeNodeAddedResult) {\n              curToNodeChild = onBeforeNodeAddedResult;\n            }\n\n            if (curToNodeChild.actualize) {\n              curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n            }\n            addChild(fromEl, curToNodeChild);\n            handleNodeAdded(curToNodeChild);\n          }\n        }\n\n        curToNodeChild = toNextSibling;\n        curFromNodeChild = fromNextSibling;\n      }\n\n      cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    } // END: morphChildren(...)\n\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n\n    if (!childrenOnly) {\n      // Handle the case where we are given two DOM nodes that are not\n      // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          // Going from an element node to a text node\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n\n          return morphedNode;\n        } else {\n          // Text node to something else\n          morphedNode = toNode;\n        }\n      }\n    }\n\n    if (morphedNode === toNode) {\n      // The \"to node\" was not compatible with the \"from node\" so we had to\n      // toss out the \"from node\" and use the \"to node\"\n      onNodeDiscarded(fromNode);\n    } else {\n      if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n        return;\n      }\n\n      morphEl(morphedNode, toNode, childrenOnly);\n\n      // We now need to loop over any keyed nodes that might need to be\n      // removed. We only do the removal if we know that the keyed node\n      // never found a match. When a keyed node is matched up we remove\n      // it out of fromNodesLookup and we use fromNodesLookup to determine\n      // if a keyed node has been matched up or not\n      if (keyedRemovalList) {\n        for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      }\n      // If we had to swap out the from node with a new node because the old\n      // node was not compatible with the target node then we need to\n      // replace the old DOM node in the original DOM tree. This is only\n      // possible if the original DOM node was part of a DOM tree which\n      // we know is the case if it has a parent node.\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n\n    return morphedNode;\n  };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n"],
  "mappings": "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",
  "names": ["morphAttrs", "morphdom", "childrenOnly"]
}
