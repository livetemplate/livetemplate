// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const countCompletedTodos = `-- name: CountCompletedTodos :one
SELECT COUNT(*) FROM todos
WHERE completed = 1
`

func (q *Queries) CountCompletedTodos(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCompletedTodos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTodos = `-- name: CountTodos :one
SELECT COUNT(*) FROM todos
`

func (q *Queries) CountTodos(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTodos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (id, text, completed, created_at)
VALUES (?, ?, ?, ?)
RETURNING id, text, completed, created_at
`

type CreateTodoParams struct {
	ID        string    `json:"id"`
	Text      string    `json:"text"`
	Completed bool      `json:"completed"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.ID,
		arg.Text,
		arg.Completed,
		arg.CreatedAt,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompletedTodos = `-- name: DeleteCompletedTodos :exec
DELETE FROM todos
WHERE completed = 1
`

func (q *Queries) DeleteCompletedTodos(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteCompletedTodos)
	return err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getAllTodos = `-- name: GetAllTodos :many
SELECT id, text, completed, created_at FROM todos
ORDER BY created_at DESC
`

func (q *Queries) GetAllTodos(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getAllTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todo
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoByID = `-- name: GetTodoByID :one
SELECT id, text, completed, created_at FROM todos
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTodoByID(ctx context.Context, id string) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodoByID, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.CreatedAt,
	)
	return i, err
}

const updateTodoCompleted = `-- name: UpdateTodoCompleted :exec
UPDATE todos
SET completed = ?
WHERE id = ?
`

type UpdateTodoCompletedParams struct {
	Completed bool   `json:"completed"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateTodoCompleted(ctx context.Context, arg UpdateTodoCompletedParams) error {
	_, err := q.db.ExecContext(ctx, updateTodoCompleted, arg.Completed, arg.ID)
	return err
}
